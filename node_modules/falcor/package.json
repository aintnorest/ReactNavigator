{
  "name": "falcor",
  "version": "0.1.12",
  "description": "A JavaScript library for efficient data fetching.",
  "main": "./lib/index.js",
  "homepage": "https://github.com/Netflix/falcor",
  "author": {
    "name": "Netflix",
    "url": "https://github.com/Netflix/falcor/authors.txt"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Netflix/falcor.git"
  },
  "licenses": [
    {
      "type": "Apache License, Version 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "scripts": {
    "test": "gulp test-coverage",
    "dist": "gulp build",
    "doc": "gulp doc",
    "perf": "gulp perf-run",
    "device": "devicePerfRunner",
    "deploy-ghpages": "./build/deploy-ghpages.sh",
    "start": "node server.js"
  },
  "files": [
    "build",
    "dist",
    "lib",
    "test"
  ],
  "keywords": [
    "JSON",
    "Netflix",
    "Observable",
    "falcorjs"
  ],
  "devDependencies": {
    "benchmark": "^1.0.0",
    "body-parser": "^1.13.3",
    "browserify": "^10.2.0",
    "bundle-collapser": "^1.2.1",
    "chai": "^1.9.1",
    "coveralls": "^2.11.2",
    "csv-parse": "^0.1.3",
    "del": "^1.2.1",
    "express": "^4.13.3",
    "falcor-express": "^0.1.2",
    "falcor-http-datasource": "^0.1.2",
    "falcor-router": "git+ssh://git@github.com/trxcllnt/falcor-router.git#pr-128-and-137",
    "falcor-router-demo": "^1.0.3",
    "grunt": "^0.4.5",
    "gulp": "^3.9.0",
    "gulp-concat": "^2.6.0",
    "gulp-eslint": "^0.12.0",
    "gulp-istanbul": "^0.3.1",
    "gulp-license": "^1.0.0",
    "gulp-mocha": "^1.1.0",
    "gulp-rename": "^1.2.0",
    "gulp-shell": "^0.4.1",
    "gulp-uglify": "^1.2.0",
    "jsdoc": "^3.3.0-beta3",
    "karma": "^0.13.9",
    "karma-benchmark": "^0.4.0",
    "karma-chrome-launcher": "^0.2.0",
    "karma-firefox-launcher": "^0.1.6",
    "karma-junit-reporter": "^0.3.4",
    "karma-safari-launcher": "^0.1.1",
    "lodash": "^2.4.1",
    "minimist": "^1.1.0",
    "mkdirp": "^0.5.1",
    "sinon": "^1.15.4",
    "through2": "^0.6.1",
    "underscore": "^1.8.3",
    "vinyl-source-stream": "^1.1.0"
  },
  "dependencies": {
    "asap": "2.0.3",
    "falcor-json-graph": "1.1.5",
    "falcor-path-syntax": "0.2.1",
    "falcor-path-utils": "0.3.4",
    "promise": "7.0.4",
    "rx": "3.1.2"
  },
  "gitHead": "8e157876a8d786562fc861b3b893e365a06bc5b0",
  "readme": "<p align=\"center\">\n  <img src=\"https://cloud.githubusercontent.com/assets/1016365/8711049/66438ebc-2b03-11e5-8a8a-75934f7ca7ec.png\">\n</p>\n\n# Falcor [![Build Status](https://travis-ci.org/Netflix/falcor.svg)](https://travis-ci.org/Netflix/falcor) [![Coverage Status](https://coveralls.io/repos/Netflix/falcor/badge.svg?branch=master&service=github)](https://coveralls.io/github/Netflix/falcor?branch=master) [![bitHound Score](https://www.bithound.io/github/Netflix/falcor/badges/score.svg)](https://www.bithound.io/github/Netflix/falcor)\n\n## Developer Preview\n\n**This release is a developer preview.** We are looking for community help to track down and fix bugs. We are also looking for help integrating with existing MVC frameworks, as well as ports to other platforms.\n\n## Important Note for Webpack Users\n\nIf you're including falcor in your app, via npm and `require('falcor')`, and you're building a browser bundle for your app with Webpack, you'll need to add an alias entry for the 'rx' module in your webpack config, to avoid this RxJS bug: 'https://github.com/Reactive-Extensions/RxJS/issues/832'. You may already have such an entry, if you're using RxJS already. An example is below:\n\nIn webpack.config.js:\n\n```js\nmodule.exports = {\n  resolve: {\n    alias: {\n      // Workaround https://github.com/Reactive-Extensions/RxJS/issues/832, until it's fixed\n      'rx$': <path to rx/dist/rx.js file >\n    }\n  }\n};\n```\n\n## Getting Started\n\nYou can check out a working example server for a Netflix-like application [here](http://github.com/netflix/falcor-express-demo) right now. Alternately you can go through this barebones tutorial in which we use the Falcor Router to create a Virtual JSON resource. In this tutorial we will use Falcor's express middleware to serve the Virtual JSON resource on an application server at the URL /model.json. We will also host a static web page on the same server which retrieves data from the Virtual JSON resource.\n\n### Creating a Virtual JSON Resource\n\nIn this example we will use the falcor Router to build a Virtual JSON resource on an app server and host it at /model.json. The JSON resource will contain the following contents:\n\n~~~js\n{\n  \"greeting\": \"Hello World\"\n}\n~~~\n\nNormally Routers retrieve the data for their Virtual JSON resource from backend datastores or other web services on-demand. However in this simple tutorial the Router will simply return static data for a single key.\n\nFirst we create a folder for our application server.\n\n~~~bash\nmkdir falcor-app-server\ncd falcor-app-server\nnpm init\n~~~\n\nNow we install the falcor Router.\n\n~~~bash\nnpm install falcor-router --save\n~~~\n\nThen install express and falcor-express.  Support for restify is also available, as is support for hapi via a [third-party implementation](https://github.com/Netflix/falcor-hapi).\n\n~~~bash\nnpm install express --save\nnpm install falcor-express --save\n~~~\n\nNow we create an index.js file with the following contents:\n\n~~~js\n// index.js\nvar falcorExpress = require('falcor-express');\nvar Router = require('falcor-router');\n\nvar express = require('express');\nvar app = express();\n\napp.use('/model.json', falcorExpress.dataSourceRoute(function (req, res) {\n  // create a Virtual JSON resource with single key (\"greeting\")\n  return new Router([\n    {\n      // match a request for the key \"greeting\"\n      route: \"greeting\",\n      // respond with a PathValue with the value of \"Hello World.\"\n      get: function() {\n        return {path:[\"greeting\"], value: \"Hello World\"};\n      }\n    }\n  ]);\n}));\n\n// serve static files from current directory\napp.use(express.static(__dirname + '/'));\n\nvar server = app.listen(3000);\n\n~~~\n\nNow we run the server, which will listen on port 3000 for requests for /model.json.\n\n~~~sh\nnode index.js\n~~~\n\n### Retrieving Data from the Virtual JSON resource\n\nNow that we've built a simple virtual JSON document with a single read-only key \"greeting\", we will create a test web page and retrieve this key from the server.\n\nNow create an index.html file with the following contents:\n\n~~~html\n<!-- index.html -->\n<html>\n  <head>\n    <!-- Do _not_  rely on this URL in production. Use only during development.  -->\n    <script src=\"https://netflix.github.io/falcor/build/falcor.browser.js\"></script>\n    <script>\n      var model = new falcor.Model({source: new falcor.HttpDataSource('/model.json') });\n\n      // retrieve the \"greeting\" key from the root of the Virtual JSON resource\n      model.\n        get(\"greeting\").\n        then(function(response) {\n          document.write(response.json.greeting);\n        });\n    </script>\n  </head>\n  <body>\n  </body>\n</html>\n~~~\n\nNow visit http://localhost:3000/index.html and you should see the message retrieved from the server:\n\nHello World\n\n## Additional Resources\n\nFor detailed high-level documentation explaining the Model, the Router, and JSON Graph check out the [Falcor website](http://netflix.github.io/falcor).\n\nFor API documentation, go [here](http://netflix.github.io/falcor/doc/Model.html)\n\nFor a working example of a Router, check out the [falcor-router-demo](http://github.com/netflix/falcor-router-demo).\n\nFor questions and discussion, use [Stack Overflow](http://stackoverflow.com/questions/tagged/falcor).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Netflix/falcor/issues"
  },
  "_id": "falcor@0.1.12",
  "_shasum": "20daaf8bfc00f0952b65d9c938201d691042efd0",
  "_from": "git+ssh://git@github.com/trxcllnt/falcor.git#pr-552-with-fancy-json",
  "_resolved": "git+ssh://git@github.com/trxcllnt/falcor.git#8e157876a8d786562fc861b3b893e365a06bc5b0"
}
